---
- name: Create VM's required for an AAP installation
  gather_facts: false
  become: false
  tags:
    - vms
  hosts:
    - localhost
  roles:
    - tosmi.lab_utilities.kubevirt_vm
  vars:
    kubevirt_vms:
      state: present
      namespace: aap
      ssh_public_key: ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIYhjnWzsArZVyyTa1E6sDbH06rUGDAhAF3bf3pmeBtm toni@stderr.at
      vms:
        "{{ aap25_vms }}"

- name: Red Hat registration
  gather_facts: false
  become: true
  remote_user: admin
  tags:
    - register
  hosts:
    - namespace_aap
  tasks:
    - name: Run subscription-manager registery
      community.general.redhat_subscription:
        state: present
        org_id: "13048846"
        activationkey: Playground

    - name: Register the insights client
      redhat.insights.insights_register:
        state: present
      become: true

    - name: Set a FQDN hostname (required for AAP)
      ansible.builtin.hostname:
        name: "{{ inventory_hostname }}"
        use: systemd

    - name: Install packages (required for AAP)
      ansible.builtin.dnf:
        state: present
        name:
          - ansible-core
          - wget
          - git
          - rsync

- name: Prepare AAP installation
  gather_facts: false
  remote_user: admin
  become: false
  tags:
    - prepare
  hosts:
    - controller01.lan.stderr.at

  pre_tasks:
    - name: Copy custom CA certificates to controller
      ansible.builtin.copy:
        content: "{{ controller_custom_ca_certificates }}"
        dest: /etc/pki/ca-trust/source/anchors/tntinfra-ca.crt
        mode: "0644"
      become: true
      register: controller_copy_ca_trust

    - name: Update system CA trust store
      ansible.builtin.command: update-ca-trust
      when: controller_copy_ca_trust.changed
      register: _aap_kubevirt_vms_update_ca_trust
      become: true
      changed_when: _aap_kubevirt_vms_update_ca_trust.rc != 0 # noqa: no-handler

  roles:
    - { role: infra.aap_utilities.aap_setup_download }
    - { role: infra.aap_utilities.aap_setup_prepare }

# - name: Deploy initial AAP config
#   gather_facts: false
#   remote_user: admin
#   become: true
#   hosts:
#     - controller01.lan.stderr.at
#   tasks:
#     - name: Configure initial LDAP authentication
#       delegate_to: localhost
#       ansible.controller.settings:
#         controller_host: "{{ controller_host }}"
#         controller_username: "{{ controller_username }}"
#         controller_password: "{{ controller_password }}"
#         validate_certs: false
#         settings:
#           AUTH_LDAP_SERVER_URI: "{{ controller_ldap_server_uri }}"
#           AUTH_LDAP_BIND_DN: "{{ controller_ldap_bind_dn }}"
#           AUTH_LDAP_BIND_PASSWORD: "{{ controller_ldap_bind_password }}"
#           AUTH_LDAP_START_TLS: "{{ controller_ldap_start_tls }}"
#           AUTH_LDAP_USER_SEARCH: "{{ controller_ldap_user_search }}"
#           AUTH_LDAP_USER_ATTR_MAP: "{{ controller_ldap_user_attr_map }}"
#           AUTH_LDAP_GROUP_SEARCH: "{{ controller_ldap_group_search }}"
#           AUTH_LDAP_GROUP_TYPE: "{{ controller_ldap_group_type }}"
#           AUTH_LDAP_GROUP_TYPE_PARAMS: "{{ controller_ldap_group_type_params}}"
#           AUTH_LDAP_USER_FLAGS_BY_GROUP: "{{ controller_ldap_user_flags_by_group }}"
#           AUTH_LDAP_ORGANIZATION_MAP: "{{ controller_ldap_organization_map }}"
#           AUTH_LDAP_TEAM_MAP: "{{ controller_ldap_team_map }}"
